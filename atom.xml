<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>NoBody的技术之路</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.helongfei.com/"/>
  <updated>2019-06-11T18:48:44.673Z</updated>
  <id>http://www.helongfei.com/</id>
  
  <author>
    <name>贺龙飞</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Open-Falcon 浅析</title>
    <link href="http://www.helongfei.com/2019/open-falcon-%E6%B5%85%E6%9E%90/"/>
    <id>http://www.helongfei.com/2019/open-falcon-浅析/</id>
    <published>2019-06-11T15:44:00.000Z</published>
    <updated>2019-06-11T18:48:44.673Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="监控系统概述"><a href="#监控系统概述" class="headerlink" title="监控系统概述"></a>监控系统概述</h1><p>在监控系统领域，相信大家都经历过 Zabbix 的时代；在公司刚起步，机器数量不多时，Zabbix 可以很好的满足我们的需求，但是随着业务的发展，Zabbix 的存储会成为主要的性能瓶颈，从而引发很多问题，增加运维成本。</p><p>近些年来，随着互联网技术的不断发展，技术架构的不断演进，监控领域有两个我值得推荐的开源系统：一个是小米出品的 Open-falcon，一个是基于 Google Borgmon 的开源实现 Prometheus。</p><p>今天主要介绍下 Open-falcon。<br><a id="more"></a></p><p>Open-falcon 有如下特点：</p><ol><li><strong>强大灵活的数据采集</strong>：自动发现，支持falcon-agent、snmp、支持用户主动push、用户自定义插件支持、opentsdb data model like（timestamp、endpoint、metric、key-value tags）</li><li><strong>水平扩展能力</strong>：支持每个周期上亿次的数据采集、告警判定、历史数据存储和查询</li><li><strong>高效率的告警策略管理</strong>：高效的portal、支持策略模板、模板继承和覆盖、多种告警方式、支持callback调用</li><li><strong>人性化的告警设置</strong>：最大告警次数、告警级别、告警恢复通知、告警暂停、不同时段不同阈值、支持维护周期</li><li><strong>高效率的graph组件</strong>：单机支撑200万metric的上报、归档、存储（周期为1分钟）</li><li><strong>高效的历史数据query组件</strong>：采用rrdtool的数据归档策略，秒级返回上百个metric一年的历史数据</li><li><strong>dashboard</strong>：多维度的数据展示，用户自定义Screen</li><li><strong>高可用</strong>：整个系统无核心单点，易运维，易部署，可水平扩展</li><li><strong>开发语言</strong>： 整个系统的后端，全部golang编写，portal和dashboard使用python编写。</li></ol><p>简而言之：Open-falcon 是一个模块化、高可用、高性能、支持水平扩展的监控告警系统，支持机器监控、业务监控、各种开源软件的监控。</p><h1 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h1><p><img src="/images/2019/06/architecture.png" alt="Architecture"></p><h2 id="Agent"><a href="#Agent" class="headerlink" title="Agent"></a>Agent</h2><blockquote><p>数据采集组件</p></blockquote><p>部署在业务机器上，主要作用：</p><ol><li>自动采集预先定义的各种采集项（机器级别的监控指标）</li><li>agent 还提供一个 HTTP 接口（/v1/push），用于接收用户自定义上报数据</li></ol><p>每隔60秒，通过 JsonRPC push 数据到 Transfer 模块（使用长连接）。</p><h2 id="Transfer"><a href="#Transfer" class="headerlink" title="Transfer"></a>Transfer</h2><blockquote><p>数据转发服务</p></blockquote><p>主要作用：</p><ol><li>接收 agent 上报的数据</li><li>按照哈希规则进行数据分片，并将分片后的数据分别 push 给 graph、judge 等组件</li></ol><h2 id="Graph"><a href="#Graph" class="headerlink" title="Graph"></a>Graph</h2><blockquote><p>存储绘图数据、历史数据</p></blockquote><p>主要作用：</p><ol><li>接口 transfer 推送数据</li><li>处理 API 组件的查询请求、返回绘图数据</li></ol><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><blockquote><p>绘图数据的查询接口</p></blockquote><p>主要作用：根据一致性哈希算法去相应的 graph 实例查询不同监控项的数据，汇总后返回</p><h2 id="Dashboard"><a href="#Dashboard" class="headerlink" title="Dashboard"></a>Dashboard</h2><blockquote><p>面向用户的查询界面</p></blockquote><h2 id="Judge"><a href="#Judge" class="headerlink" title="Judge"></a>Judge</h2><blockquote><p>告警判断</p></blockquote><p>因为数据量太大，此组件放在 transfer 组件之后，这样每个 judge 只需要处理一小部分数据；主要作用：</p><ol><li>接口 transfer 推送数据</li><li>分析数据，判断是否触发告警，需要告警则写入 redis</li></ol><p>部署一个 judge 实例处理50万~100万数据，用个5G~10G内存。</p><h2 id="Alarm"><a href="#Alarm" class="headerlink" title="Alarm"></a>Alarm</h2><blockquote><p>处理告警事件</p></blockquote><p>主要作用：</p><ol><li>从 redis 读取数据，触发动作（短信、邮件、回调等）</li><li>告警合并</li><li>已经发送的告警信息存入 MySQL，默认存7天</li></ol><p>alarm是个单点，因为未恢复的告警是放到alarm的内存中的，alarm还需要做报警合并。需要做好存活监控。</p><h2 id="HBS"><a href="#HBS" class="headerlink" title="HBS"></a>HBS</h2><blockquote><p>心跳服务器(Heartbeat Server)</p></blockquote><p>至少部署两个实例以保证可用性，一般一个实例可以搞定5000台机器；主要作用：</p><ol><li>所有 agent 都会连到 HBS，每分钟发一次心跳请求，并告知 agent 应该采集哪些端口和进程</li><li>维护业务机器的信息（host 表）</li><li>告知 judge 报警策略</li></ol><h2 id="Nodata"><a href="#Nodata" class="headerlink" title="Nodata"></a>Nodata</h2><blockquote><p>检测监控数据的上报异常</p></blockquote><p>主要作用：配置了nodata的采集项超时未上报数据，nodata生成一条默认的模拟数据</p><h2 id="Aggregator"><a href="#Aggregator" class="headerlink" title="Aggregator"></a>Aggregator</h2><blockquote><p>集群聚合</p></blockquote><p>主要作用：聚合某集群下的所有机器的某个指标的值，提供一种集群视角的监控体验</p><h2 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h2><blockquote><p>定时任务</p></blockquote><p>主要作用：</p><ol><li>index更新。包括图表索引的全量更新 和 垃圾索引清理。</li><li>falcon服务组件的自身状态数据采集。定时任务采集了transfer、graph、task这三个服务的内部状态数据。</li><li>falcon自检控任务</li></ol><h1 id="设计理念"><a href="#设计理念" class="headerlink" title="设计理念"></a>设计理念</h1><h2 id="数据采集"><a href="#数据采集" class="headerlink" title="数据采集"></a>数据采集</h2><ol><li>制定接口规范，以此接入各种监控数据</li><li>agent 自发现采集各种 Linux 性能指标，无需配置</li><li>由 HBS 下发各种采集指标、策略</li><li>支持 plugin；用户把插件提交到指定的 git repo，server端提供一个配置，哪些机器应该执行哪些插件，通过 HBS 把这个信息分发给 agent，agent 每隔一段时间去 git pull 这个 git repo，采集脚本就完成了分发。执行周期通过解析文件名来执行：60_action.sh，60s 执行一次。脚本执行完了，把输出打印到stdout，agent 截获之后 push 给 server</li></ol><h2 id="Tag"><a href="#Tag" class="headerlink" title="Tag"></a>Tag</h2><p>Tag 是一种聚合手段，可以用更少的配置覆盖更多的监控项。例如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"endpoint"</span>: <span class="string">"qd-sadev-falcon-judge01.hd"</span>,</span><br><span class="line">    <span class="string">"metric"</span>: <span class="string">"latency"</span>,</span><br><span class="line">    <span class="string">"tags"</span>: <span class="string">"department=sadev,project=falcon,module=judge,method=falcon.judge.rpc.send"</span>,</span><br><span class="line">    <span class="string">"value"</span>: <span class="number">10.2</span>,</span><br><span class="line">    <span class="string">"timestamp"</span>: <span class="number">1427204756</span>,</span><br><span class="line">    <span class="string">"step"</span>: <span class="number">60</span>,</span><br><span class="line">    <span class="string">"counterType"</span>: <span class="string">"GAUGE"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果我们这么配置：<code>latency/department=sadev all(#2) &gt; 20</code>，意味着对sadev这个部门的所有接口的latency都做了策略配置。</p><h2 id="模板继承"><a href="#模板继承" class="headerlink" title="模板继承"></a>模板继承</h2><p>同一个部门的机器，根据不同的业务对监控策略的要求是不一样的，比如业务 A 复杂高，load.1min &gt; 10 就报警，业务 B 复杂低，load.1min &gt; 5 就报警。若不支持模板继承，则需要配置两份策略，而模板继承就减少了此类工作量。</p><h2 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h2><p>Open-falcon 把数据按照用途分成两类，一类是用来绘图的，一类是用户做数据挖掘的。关于绘图数据，在数据每次存入的时候，会自动进行采样、归档。我们的归档策略如下，历史数据保存5年。同时为了不丢失信息量，数据归档的时候，会按照平均值采样、最大值采样、最小值采样存三份。</p><p>对于原始数据，transfer会打一份到hbase，也可以直接使用opentsdb</p><h1 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h1><h2 id="Dashboard-1"><a href="#Dashboard-1" class="headerlink" title="Dashboard"></a>Dashboard</h2><p><img src="/images/2019/06/dashboard.png" alt="dashboard"></p><h2 id="Screen"><a href="#Screen" class="headerlink" title="Screen"></a>Screen</h2><p><img src="/images/2019/06/screen.png" alt="Screen"></p><h2 id="Template"><a href="#Template" class="headerlink" title="Template"></a>Template</h2><p><img src="/images/2019/06/template.png" alt="template"></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol><li><a href="https://github.com/open-falcon/falcon-plus" rel="external nofollow noopener noreferrer" target="_blank">open-falcon</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;监控系统概述&quot;&gt;&lt;a href=&quot;#监控系统概述&quot; class=&quot;headerlink&quot; title=&quot;监控系统概述&quot;&gt;&lt;/a&gt;监控系统概述&lt;/h1&gt;&lt;p&gt;在监控系统领域，相信大家都经历过 Zabbix 的时代；在公司刚起步，机器数量不多时，Zabbix 可以很好的满足我们的需求，但是随着业务的发展，Zabbix 的存储会成为主要的性能瓶颈，从而引发很多问题，增加运维成本。&lt;/p&gt;
&lt;p&gt;近些年来，随着互联网技术的不断发展，技术架构的不断演进，监控领域有两个我值得推荐的开源系统：一个是小米出品的 Open-falcon，一个是基于 Google Borgmon 的开源实现 Prometheus。&lt;/p&gt;
&lt;p&gt;今天主要介绍下 Open-falcon。&lt;br&gt;
    
    </summary>
    
      <category term="监控" scheme="http://www.helongfei.com/categories/%E7%9B%91%E6%8E%A7/"/>
    
    
      <category term="falcon" scheme="http://www.helongfei.com/tags/falcon/"/>
    
  </entry>
  
  <entry>
    <title>开源监控系统浅析</title>
    <link href="http://www.helongfei.com/2019/%E5%BC%80%E6%BA%90%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F%E6%B5%85%E6%9E%90/"/>
    <id>http://www.helongfei.com/2019/开源监控系统浅析/</id>
    <published>2019-06-09T12:04:00.000Z</published>
    <updated>2019-06-11T16:38:37.033Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="为什么需要监控系统？"><a href="#为什么需要监控系统？" class="headerlink" title="为什么需要监控系统？"></a>为什么需要监控系统？</h1><p>监控系统是整个运维体系的重要环节之一，主要服务于运维人员和开发人员；运维人员需要监控硬件、软件、网络等状态，做到故障预警、自动转移、自动恢复等，开发人员需要根据监控数据快速定位问题，提高服务的可用性。尤其是「微服务架构」，若没有监控系统，一但出现故障，定位问题就需要花费大量的时间。</p><a id="more"></a><h1 id="监控系统的核心"><a href="#监控系统的核心" class="headerlink" title="监控系统的核心"></a>监控系统的核心</h1><p>抽象来看，监控系统最主要的有两部分：监控指标、告警。</p><h2 id="监控指标"><a href="#监控指标" class="headerlink" title="监控指标"></a>监控指标</h2><p>为了实现我们的监控目的，我们需要制定一些监控指标，一般我们可以把监控指标分为：基础监控指标、业务监控指标。</p><p><strong>基础监控指标</strong></p><p>通常包括CPU、内存、磁盘、端口和进程等机器、网络相关的操作系统级别的信息，一般开源监控软件都提供此类指标的数据采集。</p><p><strong>业务监控指标</strong></p><p>一般都是由业务系统内部服务产生/上报，反应业务的健康状态。通常采集的有以下几类：</p><ol><li><strong>日志</strong>。日志是主要的监控数据来源。针对 PHP 来说，通常会采集 web server 的日志、php-fpm 慢日志、web 框架日志、数据库慢日志等。通过日志我们可以分析出大量有用的信息，比如：异常状态码的分布、接口请求量分布、请求延迟、用户地域分布、服务性能瓶颈等；最重要的是，若服务出现异常，我们可以通过日志快速的定位并复现问题。日志类的数据采集，一般监控软件都会提供日志采集插件，除此之外还可以使用 Elastic Stack 。</li><li><strong>接口</strong>。一般对外接口都需要提供健康接口；针对分布式服务，需要 Trace 系统来追踪整个请求链。</li><li><strong>命令行</strong>。一些开源软件提供本地的命令来输出监控指标，比如 Nginx、MySQL、PHP-FPM、Redis等</li><li><strong>上报</strong>。可以通过插件、埋点等方式主动 push 监控指标给监控系统。</li></ol><h2 id="告警"><a href="#告警" class="headerlink" title="告警"></a>告警</h2><p>告警最主要的是：收敛、可用性。</p><p><strong>收敛</strong></p><p>收敛问题主要体现在：告警信息多，关联告警多，运维期间不断告警。</p><p><strong>可用性</strong></p><p>可用性问题主要体现在：监控与告警耦合在一起。</p><h1 id="常见的开源监控系统"><a href="#常见的开源监控系统" class="headerlink" title="常见的开源监控系统"></a>常见的开源监控系统</h1><table><thead><tr><th>项目</th><th style="text-align:left">Prometheus</th><th style="text-align:left">Open-falcon</th><th style="text-align:left">Zabbix</th></tr></thead><tbody><tr><td>自动发现</td><td style="text-align:left">YES</td><td style="text-align:left">YES</td><td style="text-align:left">YES</td></tr><tr><td>Agent</td><td style="text-align:left">YES</td><td style="text-align:left">YES</td><td style="text-align:left">YES</td></tr><tr><td>SNMP</td><td style="text-align:left">YES</td><td style="text-align:left">YES</td><td style="text-align:left">YES</td></tr><tr><td>外部脚本</td><td style="text-align:left">NO</td><td style="text-align:left">YES</td><td style="text-align:left">YES</td></tr><tr><td>插件</td><td style="text-align:left">YES</td><td style="text-align:left">YES</td><td style="text-align:left">YES</td></tr><tr><td>告警</td><td style="text-align:left">YES</td><td style="text-align:left">YES</td><td style="text-align:left">YES</td></tr><tr><td>数据储存方法</td><td style="text-align:left">TSDB</td><td style="text-align:left">MySQL/OpenTSDB/Redis</td><td style="text-align:left">MySQL</td></tr><tr><td>报表</td><td style="text-align:left">NO</td><td style="text-align:left">NO</td><td style="text-align:left">YES</td></tr><tr><td>开发语言</td><td style="text-align:left">Go</td><td style="text-align:left">Go Python</td><td style="text-align:left">C PHP</td></tr><tr><td>用户权限</td><td style="text-align:left">NO</td><td style="text-align:left">NO</td><td style="text-align:left">灵活分配</td></tr></tbody></table><p>在公司起步阶段，基本都选择 zabbix，但随着业务发展 zabbix 在数据存储上有很大的瓶颈；这时可以选择 open-falcon 或者 prometheus；若是微服务(容器化)，使用 k8s 作为容器编排，那首选 prometheus。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol><li><a href="https://www.jianshu.com/p/5b7072278b56" rel="external nofollow noopener noreferrer" target="_blank">监控系统选型Prometheus、TICK、Open-falcon、Zabbix</a></li><li><a href="https://blog.51cto.com/dangzhiqiang/2318130?source=dra" rel="external nofollow noopener noreferrer" target="_blank">常见开源告警系统对比分析(prometheus、open-falcon、zabbix)</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;为什么需要监控系统？&quot;&gt;&lt;a href=&quot;#为什么需要监控系统？&quot; class=&quot;headerlink&quot; title=&quot;为什么需要监控系统？&quot;&gt;&lt;/a&gt;为什么需要监控系统？&lt;/h1&gt;&lt;p&gt;监控系统是整个运维体系的重要环节之一，主要服务于运维人员和开发人员；运维人员需要监控硬件、软件、网络等状态，做到故障预警、自动转移、自动恢复等，开发人员需要根据监控数据快速定位问题，提高服务的可用性。尤其是「微服务架构」，若没有监控系统，一但出现故障，定位问题就需要花费大量的时间。&lt;/p&gt;
    
    </summary>
    
      <category term="监控" scheme="http://www.helongfei.com/categories/%E7%9B%91%E6%8E%A7/"/>
    
    
      <category term="falcon" scheme="http://www.helongfei.com/tags/falcon/"/>
    
      <category term="prometheus" scheme="http://www.helongfei.com/tags/prometheus/"/>
    
      <category term="zabbix" scheme="http://www.helongfei.com/tags/zabbix/"/>
    
  </entry>
  
  <entry>
    <title>Laravel自定义用户权限校验</title>
    <link href="http://www.helongfei.com/2017/laravel%E8%87%AA%E5%AE%9A%E4%B9%89%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E6%A0%A1%E9%AA%8C/"/>
    <id>http://www.helongfei.com/2017/laravel自定义用户权限校验/</id>
    <published>2017-12-29T16:05:00.000Z</published>
    <updated>2017-12-29T16:48:41.499Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在现实的架构中，帐号体系往往会单独维护，应用需要鉴权的时候会请求用户中心接口，而<code>laravel</code>使用<code>auth</code>中间件时默认采用的是<code>session</code>进行鉴权，不能满足我们的需求，所以需要自定义权限校验。</p><h1 id="Auth-中间件的工作原理"><a href="#Auth-中间件的工作原理" class="headerlink" title="Auth 中间件的工作原理"></a><code>Auth</code> 中间件的工作原理</h1><a id="more"></a><p>首先，在 <code>app/Http/Kernel.php</code> 中，发现 :<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> $routeMiddleware = [</span><br><span class="line">       <span class="string">'auth'</span> =&gt; \Illuminate\Auth\Middleware\Authenticate::class,</span><br><span class="line">       <span class="string">'auth.basic'</span> =&gt; \Illuminate\Auth\Middleware\AuthenticateWithBasicAuth::class,</span><br><span class="line">       ...</span><br><span class="line">   ];</span><br></pre></td></tr></table></figure></p><p>然后，跟踪到 <code>vendor/laravel/framework/src/Illuminate/Auth/AuthManager.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">guard</span><span class="params">($name = null)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   $name = $name ?: <span class="keyword">$this</span>-&gt;getDefaultDriver();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;guards[$name])</span><br><span class="line">               ? <span class="keyword">$this</span>-&gt;guards[$name]</span><br><span class="line">               : <span class="keyword">$this</span>-&gt;guards[$name] = <span class="keyword">$this</span>-&gt;resolve($name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getDefaultDriver</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">// 注意这行</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;app[<span class="string">'config'</span>][<span class="string">'auth.defaults.guard'</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，查看 <code>config/auth.php</code> :<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="string">'defaults'</span> =&gt; [</span><br><span class="line">       <span class="string">'guard'</span> =&gt; <span class="string">'web'</span>, <span class="comment">// 注意这行</span></span><br><span class="line">       <span class="string">'passwords'</span> =&gt; <span class="string">'users'</span>,</span><br><span class="line">   ],</span><br><span class="line">...</span><br><span class="line"><span class="string">'guards'</span> =&gt; [</span><br><span class="line">       <span class="string">'web'</span> =&gt; [</span><br><span class="line">           <span class="string">'driver'</span> =&gt; <span class="string">'session'</span>,</span><br><span class="line">           <span class="string">'provider'</span> =&gt; <span class="string">'users'</span>,</span><br><span class="line">       ],</span><br><span class="line">       ...</span><br><span class="line">   ],</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>由此可见，默认使用的<code>guard</code>是<code>web</code>，驱动是<code>session</code>；到此已经很明确了，我们需要做的只是新建一个<code>guard</code>。</p><p>具体如何创建<code>guard</code>？<br>见官方文档：<a href="https://laravel.com/docs/5.5/authentication#adding-custom-guards" rel="external nofollow noopener noreferrer" target="_blank">https://laravel.com/docs/5.5/authentication#adding-custom-guards</a></p><h1 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h1><ul><li>创建 <code>guard</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Auth</span>\<span class="title">GuardHelpers</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Contracts</span>\<span class="title">Auth</span>\<span class="title">Guard</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KohanaGuard</span> <span class="keyword">implements</span> <span class="title">Guard</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">use</span> <span class="title">GuardHelpers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> $request;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Request $request)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;request = $request;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Get the currently authenticated user.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> \Illuminate\Contracts\Auth\Authenticatable|null</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> \Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">user</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">          <span class="comment">// 校验规则</span></span><br><span class="line">          <span class="comment">// 成功返回 User Model 对象</span></span><br><span class="line">          <span class="comment">// 失败返回 null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Validate a user's credentials.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  array $credentials</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">validate</span><span class="params">(array $credentials = [])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> Implement validate() method.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>添加到 <code>app/Providers/AuthServiceProvider.php</code>:</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">$this</span>-&gt;registerPolicies();</span><br><span class="line"></span><br><span class="line">   <span class="comment">//注册 kohana 的 guard</span></span><br><span class="line">   \Auth::extend(<span class="string">'kohana'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($app, $name, array $config)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> KohanaGuard($app[<span class="string">'request'</span>]);</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>修改 <code>config/auth.php</code><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="string">'defaults'</span> =&gt; [</span><br><span class="line">    <span class="string">'guard'</span> =&gt; <span class="string">'kohana'</span>, <span class="comment">// 注意这行</span></span><br><span class="line">    <span class="string">'passwords'</span> =&gt; <span class="string">'users'</span>,</span><br><span class="line">],</span><br><span class="line">...</span><br><span class="line"><span class="string">'guards'</span> =&gt; [</span><br><span class="line">   ...</span><br><span class="line">   <span class="comment">// 以下为新增</span></span><br><span class="line">   <span class="string">'kohana'</span> =&gt; [</span><br><span class="line">     <span class="string">'driver'</span> =&gt; <span class="string">'kohana'</span>,</span><br><span class="line">     <span class="string">'provider'</span> =&gt; <span class="string">'users'</span>,</span><br><span class="line">   ],</span><br><span class="line">],</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;在现实的架构中，帐号体系往往会单独维护，应用需要鉴权的时候会请求用户中心接口，而&lt;code&gt;laravel&lt;/code&gt;使用&lt;code&gt;auth&lt;/code&gt;中间件时默认采用的是&lt;code&gt;session&lt;/code&gt;进行鉴权，不能满足我们的需求，所以需要自定义权限校验。&lt;/p&gt;
&lt;h1 id=&quot;Auth-中间件的工作原理&quot;&gt;&lt;a href=&quot;#Auth-中间件的工作原理&quot; class=&quot;headerlink&quot; title=&quot;Auth 中间件的工作原理&quot;&gt;&lt;/a&gt;&lt;code&gt;Auth&lt;/code&gt; 中间件的工作原理&lt;/h1&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://www.helongfei.com/categories/PHP/"/>
    
    
      <category term="php" scheme="http://www.helongfei.com/tags/php/"/>
    
      <category term="laravel" scheme="http://www.helongfei.com/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>CI 框架总结</title>
    <link href="http://www.helongfei.com/2016/cikuang-jia-zong-jie/"/>
    <id>http://www.helongfei.com/2016/cikuang-jia-zong-jie/</id>
    <published>2016-03-26T19:09:54.000Z</published>
    <updated>2017-11-11T07:52:27.045Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/hint.css/2.4.1/hint.min.css"><blockquote><p>本文主要是参考2.2.6的源码</p></blockquote><h1 id="设计思想"><a href="#设计思想" class="headerlink" title="设计思想"></a>设计思想</h1><p>使用 &amp;get_instance(); 可以引用所有已加载的类。<br><a id="more"></a></p><h1 id="中文手册"><a href="#中文手册" class="headerlink" title="中文手册"></a>中文手册</h1><p><a href="http://codeigniter.org.cn/userguide2/index.html" rel="external nofollow noopener noreferrer" target="_blank">http://codeigniter.org.cn/userguide2/index.html</a>  </p><h1 id="框架运行图解"><a href="#框架运行图解" class="headerlink" title="框架运行图解"></a>框架运行图解</h1><h2 id="运行流程图"><a href="#运行流程图" class="headerlink" title="运行流程图"></a>运行流程图</h2><img src="/images/2016/0327/CI.png" class="center"><h2 id="运行生命周期"><a href="#运行生命周期" class="headerlink" title="运行生命周期"></a>运行生命周期</h2><img src="/images/2016/0327/CI2.png" class="center"><h1 id="开发注意事项"><a href="#开发注意事项" class="headerlink" title="开发注意事项"></a>开发注意事项</h1><h2 id="Controller-中"><a href="#Controller-中" class="headerlink" title="Controller 中"></a>Controller 中</h2><ul><li><code>_remap</code> 方法（接管路由）</li><li><code>_output</code> 方法（接管输出）</li><li><code>_</code>前缀的方法名都会被路由屏蔽</li></ul><h1 id="如何扩展框架？"><a href="#如何扩展框架？" class="headerlink" title="如何扩展框架？"></a>如何扩展框架？</h1><h2 id="扩展-替换-core-类"><a href="#扩展-替换-core-类" class="headerlink" title="扩展/替换 core 类"></a>扩展/替换 core 类</h2><blockquote><p>此类都是在系统使用的核心类，常用的是扩展控制器类</p></blockquote><p>在 application/core 下新建文件</p><ul><li><p>扩展</p>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MY_controller</span> <span class="keyword">extends</span> <span class="title">CI_controller</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>替换</p>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CI_controller</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="使用-新建-替换-扩展类库"><a href="#使用-新建-替换-扩展类库" class="headerlink" title="使用/新建/替换/扩展类库"></a>使用/新建/替换/扩展类库</h2><ol><li><p>使用内置</p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;load-&gt;library(<span class="string">'name'</span>);</span><br></pre></td></tr></table></figure></li><li><p>建立新的类<br> 在 applicatioin/libraries 目录下</p></li><li><p>扩展已有类<br> 在 applicatioin/libraries 目录下，使用定义好的子类前缀，并继承父类<br> 比如扩展 email：  </p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MY_Email</span> <span class="keyword">extends</span> <span class="title">CI_Email</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li>替换已有类<br> 在 applicatioin/libraries 目录下，声明和默认的类名一样的类</li></ol><h2 id="使用-新建适配器"><a href="#使用-新建适配器" class="headerlink" title="使用/新建适配器"></a>使用/新建适配器</h2><ul><li>内置</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;load-&gt;driver(<span class="string">'some_parent'</span>);</span><br><span class="line"><span class="keyword">$this</span>-&gt;some_parent-&gt;some_method();</span><br><span class="line"><span class="keyword">$this</span>-&gt;some_parent-&gt;child_one-&gt;some_method();</span><br></pre></td></tr></table></figure><ul><li>自定义</li></ul><p>目录结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/application/libraries/Driver_name</span><br><span class="line">  Driver_name.php</span><br><span class="line">  drivers</span><br><span class="line">  Driver_name_subclass_1.php</span><br><span class="line">  Driver_name_subclass_2.php</span><br><span class="line">  Driver_name_subclass_3.php</span><br></pre></td></tr></table></figure><h2 id="集成自己的独立应用"><a href="#集成自己的独立应用" class="headerlink" title="集成自己的独立应用"></a>集成自己的独立应用</h2><p>目录结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/application/third_party/foo_bar</span><br><span class="line">config/</span><br><span class="line">helpers/</span><br><span class="line">language/</span><br><span class="line">libraries/</span><br><span class="line">models/</span><br></pre></td></tr></table></figure><p>使用方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;load-&gt;add_package_path(APPPATH.<span class="string">'third_party/foo_bar/'</span>);</span><br><span class="line"><span class="keyword">$this</span>-&gt;load-&gt;library(<span class="string">'foo_bar'</span>);</span><br><span class="line">...</span><br><span class="line"><span class="keyword">$this</span>-&gt;load-&gt;remove_package_path(APPPATH.<span class="string">'third_party/foo_bar/'</span>);</span><br></pre></td></tr></table></figure><h1 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h1><ol><li>默认保存 SQL；cli 模式下会内存溢出;修复方式如下：</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在配置文件中增加：</span><br><span class="line">$db[<span class="string">'default'</span>][<span class="string">'save_queries'</span>] = <span class="keyword">false</span>;</span><br><span class="line">或者在代码里增加:</span><br><span class="line"><span class="keyword">$this</span>-&gt;load-&gt;database();</span><br><span class="line"><span class="keyword">$this</span>-&gt;db-&gt;save_queries = <span class="keyword">false</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文主要是参考2.2.6的源码&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;设计思想&quot;&gt;&lt;a href=&quot;#设计思想&quot; class=&quot;headerlink&quot; title=&quot;设计思想&quot;&gt;&lt;/a&gt;设计思想&lt;/h1&gt;&lt;p&gt;使用 &amp;amp;get_instance(); 可以引用所有已加载的类。&lt;br&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://www.helongfei.com/categories/PHP/"/>
    
    
      <category term="php" scheme="http://www.helongfei.com/tags/php/"/>
    
      <category term="CI" scheme="http://www.helongfei.com/tags/CI/"/>
    
  </entry>
  
</feed>
