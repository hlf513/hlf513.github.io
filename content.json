{"pages":[{"title":"About","date":"2017-11-05T11:04:38.000Z","path":"about/index.html","text":""},{"title":"Categories","date":"2017-11-05T11:03:47.000Z","path":"categories/index.html","text":""},{"title":"Tags","date":"2017-11-05T11:02:00.000Z","path":"tags/index.html","text":""}],"posts":[{"title":"Laravel自定义用户权限校验","date":"2017-12-29T16:05:00.000Z","path":"2017/laravel自定义用户权限校验/","text":"背景在现实的架构中，帐号体系往往会单独维护，应用需要鉴权的时候会请求用户中心接口，而laravel使用auth中间件时默认采用的是session进行鉴权，不能满足我们的需求，所以需要自定义权限校验。 Auth 中间件的工作原理 首先，在 app/Http/Kernel.php 中，发现 :12345protected $routeMiddleware = [ 'auth' =&gt; \\Illuminate\\Auth\\Middleware\\Authenticate::class, 'auth.basic' =&gt; \\Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth::class, ... ]; 然后，跟踪到 vendor/laravel/framework/src/Illuminate/Auth/AuthManager.php 123456789101112131415public function guard($name = null)&#123; $name = $name ?: $this-&gt;getDefaultDriver(); return isset($this-&gt;guards[$name]) ? $this-&gt;guards[$name] : $this-&gt;guards[$name] = $this-&gt;resolve($name);&#125;...public function getDefaultDriver()&#123; // 注意这行 return $this-&gt;app['config']['auth.defaults.guard'];&#125; 然后，查看 config/auth.php :123456789101112131415...'defaults' =&gt; [ 'guard' =&gt; 'web', // 注意这行 'passwords' =&gt; 'users', ],...'guards' =&gt; [ 'web' =&gt; [ 'driver' =&gt; 'session', 'provider' =&gt; 'users', ], ... ],... 由此可见，默认使用的guard是web，驱动是session；到此已经很明确了，我们需要做的只是新建一个guard。 具体如何创建guard？见官方文档：https://laravel.com/docs/5.5/authentication#adding-custom-guards 举个例子 创建 guard 12345678910111213141516171819202122232425262728293031323334353637383940414243namespace App;use Illuminate\\Auth\\GuardHelpers;use Illuminate\\Contracts\\Auth\\Guard;use Illuminate\\Http\\Request;class KohanaGuard implements Guard&#123; use GuardHelpers; protected $request; public function __construct(Request $request) &#123; $this-&gt;request = $request; &#125; /** * Get the currently authenticated user. * * @return \\Illuminate\\Contracts\\Auth\\Authenticatable|null * @throws \\Exception */ public function user() &#123; // 校验规则 // 成功返回 User Model 对象 // 失败返回 null &#125; /** * Validate a user's credentials. * * @param array $credentials * * @return bool */ public function validate(array $credentials = []) &#123; // TODO: Implement validate() method. &#125;&#125; 添加到 app/Providers/AuthServiceProvider.php: 12345678910public function boot()&#123; $this-&gt;registerPolicies(); //注册 kohana 的 guard \\Auth::extend('kohana', function ($app, $name, array $config) &#123; return new KohanaGuard($app['request']); &#125;);&#125; 修改 config/auth.php123456789101112131415...'defaults' =&gt; [ 'guard' =&gt; 'kohana', // 注意这行 'passwords' =&gt; 'users',],...'guards' =&gt; [ ... // 以下为新增 'kohana' =&gt; [ 'driver' =&gt; 'kohana', 'provider' =&gt; 'users', ],],...","tags":[{"name":"php","slug":"php","permalink":"http://www.helongfei.com/tags/php/"},{"name":"laravel","slug":"laravel","permalink":"http://www.helongfei.com/tags/laravel/"}],"categories":[{"name":"PHP","slug":"PHP","permalink":"http://www.helongfei.com/categories/PHP/"}]},{"title":"CI 框架总结","date":"2016-03-26T19:09:54.000Z","path":"2016/cikuang-jia-zong-jie/","text":"本文主要是参考2.2.6的源码 设计思想使用 &amp;get_instance(); 可以引用所有已加载的类。 中文手册http://codeigniter.org.cn/userguide2/index.html 框架运行图解运行流程图 运行生命周期 开发注意事项Controller 中 _remap 方法（接管路由） _output 方法（接管输出） _前缀的方法名都会被路由屏蔽 如何扩展框架？扩展/替换 core 类 此类都是在系统使用的核心类，常用的是扩展控制器类 在 application/core 下新建文件 扩展 1class MY_controller extends CI_controller&#123;&#125; 替换 1class CI_controller&#123;&#125; 使用/新建/替换/扩展类库 使用内置 1$this-&gt;load-&gt;library('name'); 建立新的类 在 applicatioin/libraries 目录下 扩展已有类 在 applicatioin/libraries 目录下，使用定义好的子类前缀，并继承父类 比如扩展 email： 1class MY_Email extends CI_Email&#123;&#125; 替换已有类 在 applicatioin/libraries 目录下，声明和默认的类名一样的类 使用/新建适配器 内置 123$this-&gt;load-&gt;driver('some_parent');$this-&gt;some_parent-&gt;some_method();$this-&gt;some_parent-&gt;child_one-&gt;some_method(); 自定义 目录结构： 123456/application/libraries/Driver_name Driver_name.php drivers Driver_name_subclass_1.php Driver_name_subclass_2.php Driver_name_subclass_3.php 集成自己的独立应用目录结构： 123456/application/third_party/foo_barconfig/helpers/language/libraries/models/ 使用方法： 1234$this-&gt;load-&gt;add_package_path(APPPATH.'third_party/foo_bar/');$this-&gt;load-&gt;library('foo_bar');...$this-&gt;load-&gt;remove_package_path(APPPATH.'third_party/foo_bar/'); 坑 默认保存 SQL；cli 模式下会内存溢出;修复方式如下： 12345在配置文件中增加：$db['default']['save_queries'] = false;或者在代码里增加:$this-&gt;load-&gt;database();$this-&gt;db-&gt;save_queries = false;","tags":[{"name":"php","slug":"php","permalink":"http://www.helongfei.com/tags/php/"},{"name":"CI","slug":"CI","permalink":"http://www.helongfei.com/tags/CI/"}],"categories":[{"name":"PHP","slug":"PHP","permalink":"http://www.helongfei.com/categories/PHP/"}]}]}